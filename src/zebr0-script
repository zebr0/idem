#!/usr/bin/python3 -u

import datetime
import hashlib
import os.path
import pathlib
import subprocess
import sys
import time

import zebr0


# formats given time in a human-readable way
def strformat(timestamp): return datetime.datetime.fromtimestamp(timestamp).strftime("%c")


# turns given text in blue
def blue(string): return "\033[94m" + string + "\033[0m"


# turns given text in green
def green(string): return "\033[92m" + string + "\033[0m"


# turns given text in red
def red(string): return "\033[91m" + string + "\033[0m"


# returns the full path of a history file
def get_full_path(file): return os.path.join(args.directory, file)


# returns the mtime of a history file
def get_mtime(file): return os.path.getmtime(get_full_path(file))


# returns the md5 hash of a command
def md5(command): return hashlib.md5(command.encode("utf-8")).hexdigest()


# returns if the command has already been run before (i.e. has a history file)
def todo(command): return not os.path.isfile(get_full_path(md5(command)))


# creates a history file to log the command's execution
def write_history_file(command):
    pathlib.Path(get_full_path(md5(command))).write_text(command)


# main function: prints a history of all executed commands
def history():
    if os.path.isdir(args.directory):
        for filename in sorted(os.listdir(args.directory), key=get_mtime):
            with open(get_full_path(filename)) as file:
                print(blue(filename), green(strformat(get_mtime(filename))), file.read().strip())


# main function: downloads then runs or tests a given script
def run():
    # ensures that history path exists
    if not os.path.isdir(args.directory):
        os.makedirs(args.directory)

    recursive(args.script)


def recursive(script):
    for command in zebr0_service.lookup(script).splitlines():
        if command.startswith("## script "):
            recursive(command.rsplit()[2])
        elif command and (command.startswith("## lookup ") or not command.startswith("#")):  # filters out empty lines and regular comments
            handle(command)


# executes the command if it hasn't been executed yet
# in "dry" mode, prints the command's status, whether it will be executed or not
# in "step" mode, asks confirmation before running each step
def handle(command):
    if args.dry:
        print(blue("  todo") if todo(command) else green("  done"), command)
    elif not todo(command):
        print(green("skipping"), command)
    else:
        if args.step:
            print(blue("next:"), command)
            print(blue("(e)xecute,"), green("(s)kip,"), green("always ski(p),"), red("(a)bort ?"))

            choice = sys.stdin.readline().strip()
            if choice == "e":
                print(blue("executing"))
            elif choice == "s":
                print(green("skipped"))
                return
            elif choice == "p":  # to always skip a command, we write a history file even if the command hasn't been executed
                write_history_file(command)
                print(green("skipped"))
                return
            else:  # choice "a"
                print(red("aborting"))
                exit(0)
        else:
            print(blue("executing"), command)

        # failure tolerance: max 4 shots for each command to succeed
        for retry in reversed(range(4)):
            if execute(command):
                write_history_file(command)
                print(green("done"))
                return
            elif retry:  # on failure, if there are still retries to do, we wait before looping again
                time.sleep(10)
                print(blue("retrying"))
            else:
                print(red("error"))
                exit(1)


def execute(command):
    try:
        if command.startswith("## lookup "):  # then we write the contents of the lookup to the specified path
            split = command.rsplit()
            pathlib.Path(split[3]).write_text(zebr0_service.lookup(split[2], strip=False))
            return True
        else:
            # opens a subshell to execute the command, and prints stdout and stderr lines as they come
            return subprocess.Popen(command, shell=True, stdout=sys.stdout, stderr=sys.stderr).wait() == 0
    except Exception as exception:
        print(red(str(exception)))
        return False


argparser = zebr0.ArgumentParser(description="Minimalist local provisioning.")
argparser.add_argument("-d", "--directory", default="/var/zebr0/history", help="path to the history files directory (default: /var/zebr0/history)")

argparser.add_argument("command", choices=["history", "run"])
argparser.add_argument("script", nargs="?", default="script", help="script identifier in the repository (default: script)")
argparser.add_argument("--dry", action="store_true", help="tests the script instead of running it")
argparser.add_argument("--step", action="store_true", help="asks confirmation before running each step")

args = argparser.parse_args()
zebr0_service = zebr0.Service(args)

# calls the method given as parameter
globals()[args.command]()
